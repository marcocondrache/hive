---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  generate-clusterconfig:
    desc: Generate clusterconfig for Talos
    preconditions:
      - which op test talhelper
      - test -f {{.TALOS_DIR}}/talsecret.yaml
      - test -f {{.TALOS_DIR}}/talconfig.yaml
      - test -f {{.TALOS_DIR}}/talhelper-secrets.env
      - op user get --me
    cmds:
      - op run --env-file {{.TALOS_DIR}}/talhelper-secrets.env --no-masking -- talhelper genconfig
        --secret-file {{.TALOS_DIR}}/talsecret.yaml
        --config-file {{.TALOS_DIR}}/talconfig.yaml
        --out-dir {{.TALOS_DIR}}/clusterconfig
        --debug

  apply-clusterconfig:
    desc: Apply clusterconfig for a Talos cluster
    vars:
      NODES:
        sh: |
          yq '.nodes[] | .hostname + "," + .ipAddress' {{.TALOS_DIR}}/talconfig.yaml
    preconditions:
      - which ls
      - test -f "${TALOSCONFIG}"
    cmds:
      - for:
          var: NODES
        task: _apply-machineconfig
        vars:
          NODE: '{{ splitList "," .ITEM | last }}'
          DRY_RUN: "{{ .DRY_RUN }}"
          FILENAME: '{{.TALOS_DIR}}/clusterconfig/hive-{{splitList "," .ITEM | first}}.yaml'
          INSECURE: "{{ .INSECURE }}"

  #Â TODO: FIX
  flash-node:
    desc: Flash a Talos node
    preconditions:
      - which talosctl
      - test -f "${TALOSCONFIG}"
    vars:
      NODE: "{{.NODE}}"
      TMP_DIR:
        sh: mktemp -d
    cmds:
      - defer: rm -rf {{.TMP_DIR}}
      - task: _download-image
        vars:
          TALOS_IMAGE: "{{.TMP_DIR}}/image.raw.xz"
      - tpi flash -n {{.NODE}} -i {{.TMP_DIR}}/image.raw

  reset-node:
    desc: Reset a Talos node
    preconditions:
      - which talosctl
      - test -f "${TALOSCONFIG}"
      - talosctl --nodes {{.NODE}} get machineconfig
    vars:
      NODE: "{{.NODE}}"
    cmds:
      - talosctl --nodes {{.NODE}} reset --graceful=false --user-disks-to-wipe=/dev/nvme0n1

  apply-node:
    desc: Apply Talos config to a node [NODE=required]
    preconditions:
      - which talosctl
      - test -f "${TALOSCONFIG}"
      - talosctl --nodes {{.NODE}} get machineconfig
    requires:
      vars:
        - NODE
    vars:
      FILE:
        sh: ls {{.TALOS_DIR}}/clusterconfig/hive-{{.NODE}}*.yaml
    cmds:
      - task: _apply-machineconfig
        vars:
          FILENAME: "{{.FILE}}"
          HOSTNAME: "{{.NODE}}"
      - talosctl --nodes {{.NODE}} health

  upgrade-node:
    desc: Upgrade Talos on a single node [NODE=required]
    preconditions:
      - which talosctl
      - test -f "${TALOSCONFIG}"
      - talosctl --nodes {{.NODE}} get machineconfig
    requires:
      vars:
        - NODE
    vars:
      FILE:
        sh: ls {{.TALOS_DIR}}/clusterconfig/hive-{{.NODE}}*.yaml
      TALOS_IMAGE:
        sh: yq '.machine.install.image' < "{{.FILE}}"
    cmds:
      - talosctl --nodes {{.NODE}} upgrade --image="{{.TALOS_IMAGE}}" --timeout=10m
      - talosctl --nodes {{.NODE}} health

  _download-image:
    desc: Download a Talos image
    vars:
      TALOS_IMAGE: "{{.TALOS_DIR}}/image.raw.xz"
      TALOS_IMAGE_URL:
        sh: cd {{.TALOS_DIR}} && talhelper genurl image
    cmds:
      - curl -sSL -o {{.TALOS_IMAGE}} "{{.TALOS_IMAGE_URL}}"
      - xz -d {{.TALOS_IMAGE}}
      - rm -f {{.TALOS_IMAGE}}

  _apply-machineconfig:
    internal: true
    desc: Apply a single Talos machineConfig to a Talos node
    preconditions:
      - which talosctl
      - test -f "{{.FILENAME}}"
    requires:
      vars:
        - NODE
        - FILENAME
    vars:
      MODE: '{{.MODE | default "auto"}}'
    cmds:
      - talosctl apply-config
        --nodes "{{.NODE}}"
        --file "{{.FILENAME}}"
        --mode="{{.MODE}}"
        {{ if eq "true" .INSECURE }}--insecure{{ end }}
        {{ if eq "true" .DRY_RUN }}--dry-run{{ end }}
