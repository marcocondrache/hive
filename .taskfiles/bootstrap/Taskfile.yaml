---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  apply-resources:
    silent: true
    vars:
      RESOURCES:
        sh: minijinja-cli {{.BOOTSTRAP_DIR}}/templates/resources.yaml.j2 | op inject
    cmds:
      - echo "{{.RESOURCES}}" | kubectl apply --server-side -f -

  apply-cdrs:
    silent: true
    internal: true
    vars:
      CDRS:
        # renovate: datasource=github-releases depName=kubernetes-sigs/external-dns
        - https://raw.githubusercontent.com/kubernetes-sigs/external-dns/refs/tags/v0.17.0/config/crd/standard/dnsendpoint.yaml
        # renovate: datasource=github-releases depName=kubernetes-sigs/gateway-api
        - https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.3.0/experimental-install.yaml
        # renovate: datasource=github-releases depName=prometheus-operator/prometheus-operator
        - https://github.com/prometheus-operator/prometheus-operator/releases/download/v0.82.2/stripped-down-crds.yaml
    cmds:
      - for: { var: CDRS }
        cmd: |
          kubectl apply --server-side --filename {{.ITEM}}

  apply-helmfile:
    internal: true
    cmds:
      - helmfile apply -f {{.BOOTSTRAP_DIR}}/helmfile.yaml --skip-diff-on-install --suppress-diff --debug
    silent: true

  talos:
    desc: Bootstrap Talos
    vars:
      TALOS_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - which jq minijinja-cli talosctl
      - test -f "${TALOSCONFIG}"
      - talosctl config info
    cmds:
      - task: :talos:apply-clusterconfig
        vars:
          INSECURE: "true"
      - until talosctl --nodes {{.TALOS_CONTROLLER}} bootstrap; do sleep 5; done
      - talosctl kubeconfig --nodes {{.TALOS_CONTROLLER}} --force --force-context-name "hive" "${KUBECONFIG}"

  cluster:
    cmds:
      - task: apply-cdrs
      - task: apply-resources
      - task: apply-helmfile
    silent: true
