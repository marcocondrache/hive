---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  default:
    desc: Bootstrap Talos and Kubernetes cluster
    cmds:
      - task: talos
      - task: wait
      - task: crds
      - task: resources
      - task: apps

  wait:
    desc: Wait for all nodes to be 'Ready=False'
    cmd: |
      echo "Waiting for nodes to be available..."
      until kubectl wait nodes --for=condition=Ready=False --all --timeout=10s &>/dev/null; do
          echo "Nodes are not available, waiting for nodes to be available. Retrying in 10 seconds..."
          sleep 10
      done
    status:
      - kubectl wait nodes --for=condition=Ready=True --all --timeout=10s
    preconditions:
      - talosctl config info
      - which kubectl
    silent: true

  resources:
    desc: Bootstrap Resources
    cmd: |
      echo "Bootstrapping Resources..."
      op inject --in-file {{.BOOTSTRAP_DIR}}/templates/resources.yaml | kubectl apply --server-side --filename -
      echo "Resources bootstrapped [{{.ITEM}}]"
    status:
      - op inject --in-file {{.BOOTSTRAP_DIR}}/templates/resources.yaml | kubectl diff --filename -
    preconditions:
      - op whoami
      - test -f {{.BOOTSTRAP_DIR}}/templates/resources.yaml
      - which kubectl op
    silent: true

  crds:
    desc: Bootstrap CRDs
    cmds:
      - echo "Bootstrapping CRDs..."
      - for:
          - # renovate: datasource=github-releases depName=kubernetes-sigs/external-dns
            https://raw.githubusercontent.com/kubernetes-sigs/external-dns/refs/tags/v0.18.0/config/crd/standard/dnsendpoints.externaldns.k8s.io.yaml
          - # renovate: datasource=github-releases depName=kubernetes-sigs/gateway-api
            https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.3.0/experimental-install.yaml
          - # renovate: datasource=github-releases depName=prometheus-operator/prometheus-operator
            https://github.com/prometheus-operator/prometheus-operator/releases/download/v0.84.1/stripped-down-crds.yaml
        cmd: |
          if ! kubectl diff --filename "{{.ITEM}}" &>/dev/null; then
              echo "Applying CRD from {{.ITEM}}..."
              kubectl apply --server-side --filename "{{.ITEM}}"
          fi
    preconditions:
      - which kubectl
    silent: true

  apps:
    desc: Bootstrap Apps
    cmd: |
      echo "Bootstrapping Apps..."
      helmfile --file {{.BOOTSTRAP_DIR}}/helmfile.yaml sync --hide-notes
      echo "Apps bootstrapped [{{.ITEM}}]"
    preconditions:
      - test -f {{.BOOTSTRAP_DIR}}/helmfile.yaml
      - which helm helmfile
    silent: true

  talos:
    desc: Bootstrap Talos
    vars:
      TALOS_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - which jq minijinja-cli talosctl
      - test -f "${TALOSCONFIG}"
      - talosctl config info
    cmds:
      - task: :talos:apply-clusterconfig
        vars:
          INSECURE: "true"
      - until talosctl --nodes {{.TALOS_CONTROLLER}} bootstrap; do sleep 5; done
      - talosctl kubeconfig --nodes {{.TALOS_CONTROLLER}} --force --force-context-name "hive" "${KUBECONFIG}"
